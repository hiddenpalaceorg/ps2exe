import struct

from Crypto.Cipher import AES
from Crypto.Hash import SHA1
from Crypto.Util.Padding import pad


# KIRK constants
class KIRK:
    PSP_KIRK_CMD_ENCRYPT = 4
    PSP_KIRK_CMD_ENCRYPT_FUSE = 5
    PSP_KIRK_CMD_DECRYPT = 7
    PSP_KIRK_CMD_DECRYPT_FUSE = 8
    PSP_KIRK_CMD_PRNG = 14


class KirkError(Exception):
    """Base exception for KIRK errors"""
    pass


class KirkNotEnabledError(KirkError):
    """KIRK is not enabled"""
    pass


class KirkInvalidModeError(KirkError):
    """Invalid mode specified for KIRK operation"""
    pass


class KirkInvalidSeedError(KirkError):
    """Invalid seed specified for KIRK operation"""
    pass


class KirkDataSizeZeroError(KirkError):
    """Data size is zero"""
    pass


class KirkNotInitializedError(KirkError):
    """KIRK not initialized"""
    pass


class KirkEngine:
    # PSP KIRK commands
    PSP_KIRK_CMD_ENCRYPT_PRIVATE = 0
    PSP_KIRK_CMD_DECRYPT_PRIVATE = 1
    PSP_KIRK_CMD_ENCRYPT_SIGN = 2
    PSP_KIRK_CMD_DECRYPT_SIGN = 3
    PSP_KIRK_CMD_ENCRYPT = 4  # IV_0
    PSP_KIRK_CMD_ENCRYPT_FUSE = 5
    PSP_KIRK_CMD_ENCRYPT_USER = 6
    PSP_KIRK_CMD_DECRYPT = 7  # IV_0
    PSP_KIRK_CMD_DECRYPT_FUSE = 8
    PSP_KIRK_CMD_DECRYPT_USER = 9
    PSP_KIRK_CMD_PRIV_SIG_CHECK = 10
    PSP_KIRK_CMD_SHA1_HASH = 11
    PSP_KIRK_CMD_ECDSA_GEN_KEYS = 12
    PSP_KIRK_CMD_ECDSA_MULTIPLY_POINT = 13
    PSP_KIRK_CMD_PRNG = 14
    PSP_KIRK_CMD_INIT = 15
    PSP_KIRK_CMD_ECDSA_SIGN = 16
    PSP_KIRK_CMD_ECDSA_VERIFY = 17

    # Kirk modes
    KIRK_MODE_CMD1 = 1
    KIRK_MODE_CMD2 = 2
    KIRK_MODE_CMD3 = 3
    KIRK_MODE_ENCRYPT_CBC = 4
    KIRK_MODE_DECRYPT_CBC = 5

    KEYVAULT = [
        bytearray([0x2C, 0x92, 0xE5, 0x90, 0x2B, 0x86, 0xC1, 0x06, 0xB7, 0x2E, 0xEA, 0x6C, 0xD4, 0xEC, 0x72, 0x48]),
        bytearray([0x05, 0x8D, 0xC8, 0x0B, 0x33, 0xA5, 0xBF, 0x9D, 0x56, 0x98, 0xFA, 0xE0, 0xD3, 0x71, 0x5E, 0x1F]),
        bytearray([0xB8, 0x13, 0xC3, 0x5E, 0xC6, 0x44, 0x41, 0xE3, 0xDC, 0x3C, 0x16, 0xF5, 0xB4, 0x5E, 0x64, 0x84]),
        bytearray([0x98, 0x02, 0xC4, 0xE6, 0xEC, 0x9E, 0x9E, 0x2F, 0xFC, 0x63, 0x4C, 0xE4, 0x2F, 0xBB, 0x46, 0x68]),
        bytearray([0x99, 0x24, 0x4C, 0xD2, 0x58, 0xF5, 0x1B, 0xCB, 0xB0, 0x61, 0x9C, 0xA7, 0x38, 0x30, 0x07, 0x5F]),
        bytearray([0x02, 0x25, 0xD7, 0xBA, 0x63, 0xEC, 0xB9, 0x4A, 0x9D, 0x23, 0x76, 0x01, 0xB3, 0xF6, 0xAC, 0x17]),
        bytearray([0x60, 0x99, 0xF2, 0x81, 0x70, 0x56, 0x0E, 0x5F, 0x74, 0x7C, 0xB5, 0x20, 0xC0, 0xCD, 0xC2, 0x3C]),
        bytearray([0x76, 0x36, 0x8B, 0x43, 0x8F, 0x77, 0xD8, 0x7E, 0xFE, 0x5F, 0xB6, 0x11, 0x59, 0x39, 0x88, 0x5C]),
        bytearray([0x14, 0xA1, 0x15, 0xEB, 0x43, 0x4A, 0x1B, 0xA4, 0x90, 0x5E, 0x03, 0xB6, 0x17, 0xA1, 0x5C, 0x04]),
        bytearray([0xE6, 0x58, 0x03, 0xD9, 0xA7, 0x1A, 0xA8, 0x7F, 0x05, 0x9D, 0x22, 0x9D, 0xAF, 0x54, 0x53, 0xD0]),
        bytearray([0xBA, 0x34, 0x80, 0xB4, 0x28, 0xA7, 0xCA, 0x5F, 0x21, 0x64, 0x12, 0xF7, 0x0F, 0xBB, 0x73, 0x23]),
        bytearray([0x72, 0xAD, 0x35, 0xAC, 0x9A, 0xC3, 0x13, 0x0A, 0x77, 0x8C, 0xB1, 0x9D, 0x88, 0x55, 0x0B, 0x0C]),
        bytearray([0x84, 0x85, 0xC8, 0x48, 0x75, 0x08, 0x43, 0xBC, 0x9B, 0x9A, 0xEC, 0xA7, 0x9C, 0x7F, 0x60, 0x18]),
        bytearray([0xB5, 0xB1, 0x6E, 0xDE, 0x23, 0xA9, 0x7B, 0x0E, 0xA1, 0x7C, 0xDB, 0xA2, 0xDC, 0xDE, 0xC4, 0x6E]),
        bytearray([0xC8, 0x71, 0xFD, 0xB3, 0xBC, 0xC5, 0xD2, 0xF2, 0xE2, 0xD7, 0x72, 0x9D, 0xDF, 0x82, 0x68, 0x82]),
        bytearray([0x0A, 0xBB, 0x33, 0x6C, 0x96, 0xD4, 0xCD, 0xD8, 0xCB, 0x5F, 0x4B, 0xE0, 0xBA, 0xDB, 0x9E, 0x03]),
        bytearray([0x32, 0x29, 0x5B, 0xD5, 0xEA, 0xF7, 0xA3, 0x42, 0x16, 0xC8, 0x8E, 0x48, 0xFF, 0x50, 0xD3, 0x71]),
        bytearray([0x46, 0xF2, 0x5E, 0x8E, 0x4D, 0x2A, 0xA5, 0x40, 0x73, 0x0B, 0xC4, 0x6E, 0x47, 0xEE, 0x6F, 0x0A]),
        bytearray([0x5D, 0xC7, 0x11, 0x39, 0xD0, 0x19, 0x38, 0xBC, 0x02, 0x7F, 0xDD, 0xDC, 0xB0, 0x83, 0x7D, 0x9D]),
        bytearray([0x51, 0xDD, 0x65, 0xF0, 0x71, 0xA4, 0xE5, 0xEA, 0x6A, 0xAF, 0x12, 0x19, 0x41, 0x29, 0xB8, 0xF4]),
        bytearray([0x03, 0x76, 0x3C, 0x68, 0x65, 0xC6, 0x9B, 0x0F, 0xFE, 0x8F, 0xD8, 0xEE, 0xA4, 0x36, 0x16, 0xA0]),
        bytearray([0x7D, 0x50, 0xB8, 0x5C, 0xAF, 0x67, 0x69, 0xF0, 0xE5, 0x4A, 0xA8, 0x09, 0x8B, 0x0E, 0xBE, 0x1C]),
        bytearray([0x72, 0x68, 0x4B, 0x32, 0xAC, 0x3B, 0x33, 0x2F, 0x2A, 0x7A, 0xFC, 0x9E, 0x14, 0xD5, 0x6F, 0x6B]),
        bytearray([0x20, 0x1D, 0x31, 0x96, 0x4A, 0xD9, 0x9F, 0xBF, 0x32, 0xD5, 0xD6, 0x1C, 0x49, 0x1B, 0xD9, 0xFC]),
        bytearray([0xF8, 0xD8, 0x44, 0x63, 0xD6, 0x10, 0xD1, 0x2A, 0x44, 0x8E, 0x96, 0x90, 0xA6, 0xBB, 0x0B, 0xAD]),
        bytearray([0x5C, 0xD4, 0x05, 0x7F, 0xA1, 0x30, 0x60, 0x44, 0x0A, 0xD9, 0xB6, 0x74, 0x5F, 0x24, 0x4F, 0x4E]),
        bytearray([0xF4, 0x8A, 0xD6, 0x78, 0x59, 0x9C, 0x22, 0xC1, 0xD4, 0x11, 0x93, 0x3D, 0xF8, 0x45, 0xB8, 0x93]),
        bytearray([0xCA, 0xE7, 0xD2, 0x87, 0xA2, 0xEC, 0xC1, 0xCD, 0x94, 0x54, 0x2B, 0x5E, 0x1D, 0x94, 0x88, 0xB2]),
        bytearray([0xDE, 0x26, 0xD3, 0x7A, 0x39, 0x95, 0x6C, 0x2A, 0xD8, 0xC3, 0xA6, 0xAF, 0x21, 0xEB, 0xB3, 0x01]),
        bytearray([0x7C, 0xB6, 0x8B, 0x4D, 0xA3, 0x8D, 0x1D, 0xD9, 0x32, 0x67, 0x9C, 0xA9, 0x9F, 0xFB, 0x28, 0x52]),
        bytearray([0xA0, 0xB5, 0x56, 0xB4, 0x69, 0xAB, 0x36, 0x8F, 0x36, 0xDE, 0xC9, 0x09, 0x2E, 0xCB, 0x41, 0xB1]),
        bytearray([0x93, 0x9D, 0xE1, 0x9B, 0x72, 0x5F, 0xEE, 0xE2, 0x45, 0x2A, 0xBC, 0x17, 0x06, 0xD1, 0x47, 0x69]),
        bytearray([0xA4, 0xA4, 0xE6, 0x21, 0x38, 0x2E, 0xF1, 0xAF, 0x7B, 0x17, 0x7A, 0xE8, 0x42, 0xAD, 0x00, 0x31]),
        bytearray([0xC3, 0x7F, 0x13, 0xE8, 0xCF, 0x84, 0xDB, 0x34, 0x74, 0x7B, 0xC3, 0xA0, 0xF1, 0x9D, 0x3A, 0x73]),
        bytearray([0x2B, 0xF7, 0x83, 0x8A, 0xD8, 0x98, 0xE9, 0x5F, 0xA5, 0xF9, 0x01, 0xDA, 0x61, 0xFE, 0x35, 0xBB]),
        bytearray([0xC7, 0x04, 0x62, 0x1E, 0x71, 0x4A, 0x66, 0xEA, 0x62, 0xE0, 0x4B, 0x20, 0x3D, 0xB8, 0xC2, 0xE5]),
        bytearray([0xC9, 0x33, 0x85, 0x9A, 0xAB, 0x00, 0xCD, 0xCE, 0x4D, 0x8B, 0x8E, 0x9F, 0x3D, 0xE6, 0xC0, 0x0F]),
        bytearray([0x18, 0x42, 0x56, 0x1F, 0x2B, 0x5F, 0x34, 0xE3, 0x51, 0x3E, 0xB7, 0x89, 0x77, 0x43, 0x1A, 0x65]),
        bytearray([0xDC, 0xB0, 0xA0, 0x06, 0x5A, 0x50, 0xA1, 0x4E, 0x59, 0xAC, 0x97, 0x3F, 0x17, 0x58, 0xA3, 0xA3]),
        bytearray([0xC4, 0xDB, 0xAE, 0x83, 0xE2, 0x9C, 0xF2, 0x54, 0xA3, 0xDD, 0x37, 0x4E, 0x80, 0x7B, 0xF4, 0x25]),
        bytearray([0xBF, 0xAE, 0xEB, 0x49, 0x82, 0x65, 0xC5, 0x7C, 0x64, 0xB8, 0xC1, 0x7E, 0x19, 0x06, 0x44, 0x09]),
        bytearray([0x79, 0x7C, 0xEC, 0xC3, 0xB3, 0xEE, 0x0A, 0xC0, 0x3B, 0xD8, 0xE6, 0xC1, 0xE0, 0xA8, 0xB1, 0xA4]),
        bytearray([0x75, 0x34, 0xFE, 0x0B, 0xD6, 0xD0, 0xC2, 0x8D, 0x68, 0xD4, 0xE0, 0x2A, 0xE7, 0xD5, 0xD1, 0x55]),
        bytearray([0xFA, 0xB3, 0x53, 0x26, 0x97, 0x4F, 0x4E, 0xDF, 0xE4, 0xC3, 0xA8, 0x14, 0xC3, 0x2F, 0x0F, 0x88]),
        bytearray([0xEC, 0x97, 0xB3, 0x86, 0xB4, 0x33, 0xC6, 0xBF, 0x4E, 0x53, 0x9D, 0x95, 0xEB, 0xB9, 0x79, 0xE4]),
        bytearray([0xB3, 0x20, 0xA2, 0x04, 0xCF, 0x48, 0x06, 0x29, 0xB5, 0xDD, 0x8E, 0xFC, 0x98, 0xD4, 0x17, 0x7B]),
        bytearray([0x5D, 0xFC, 0x0D, 0x4F, 0x2C, 0x39, 0xDA, 0x68, 0x4A, 0x33, 0x74, 0xED, 0x49, 0x58, 0xA7, 0x3A]),
        bytearray([0xD7, 0x5A, 0x54, 0x22, 0xCE, 0xD9, 0xA3, 0xD6, 0x2B, 0x55, 0x7D, 0x8D, 0xE8, 0xBE, 0xC7, 0xEC]),
        bytearray([0x6B, 0x4A, 0xEE, 0x43, 0x45, 0xAE, 0x70, 0x07, 0xCF, 0x8D, 0xCF, 0x4E, 0x4A, 0xE9, 0x3C, 0xFA]),
        bytearray([0x2B, 0x52, 0x2F, 0x66, 0x4C, 0x2D, 0x11, 0x4C, 0xFE, 0x61, 0x31, 0x8C, 0x56, 0x78, 0x4E, 0xA6]),
        bytearray([0x3A, 0xA3, 0x4E, 0x44, 0xC6, 0x6F, 0xAF, 0x7B, 0xFA, 0xE5, 0x53, 0x27, 0xEF, 0xCF, 0xCC, 0x24]),
        bytearray([0x2B, 0x5C, 0x78, 0xBF, 0xC3, 0x8E, 0x49, 0x9D, 0x41, 0xC3, 0x3C, 0x5C, 0x7B, 0x27, 0x96, 0xCE]),
        bytearray([0xF3, 0x7E, 0xEA, 0xD2, 0xC0, 0xC8, 0x23, 0x1D, 0xA9, 0x9B, 0xFA, 0x49, 0x5D, 0xB7, 0x08, 0x1B]),
        bytearray([0x70, 0x8D, 0x4E, 0x6F, 0xD1, 0xF6, 0x6F, 0x1D, 0x1E, 0x1F, 0xCB, 0x02, 0xF9, 0xB3, 0x99, 0x26]),
        bytearray([0x0F, 0x67, 0x16, 0xE1, 0x80, 0x69, 0x9C, 0x51, 0xFC, 0xC7, 0xAD, 0x6E, 0x4F, 0xB8, 0x46, 0xC9]),
        bytearray([0x56, 0x0A, 0x49, 0x4A, 0x84, 0x4C, 0x8E, 0xD9, 0x82, 0xEE, 0x0B, 0x6D, 0xC5, 0x7D, 0x20, 0x8D]),
        bytearray([0x12, 0x46, 0x8D, 0x7E, 0x1C, 0x42, 0x20, 0x9B, 0xBA, 0x54, 0x26, 0x83, 0x5E, 0xB0, 0x33, 0x03]),
        bytearray([0xC4, 0x3B, 0xB6, 0xD6, 0x53, 0xEE, 0x67, 0x49, 0x3E, 0xA9, 0x5F, 0xBC, 0x0C, 0xED, 0x6F, 0x8A]),
        bytearray([0x2C, 0xC3, 0xCF, 0x8C, 0x28, 0x78, 0xA5, 0xA6, 0x63, 0xE2, 0xAF, 0x2D, 0x71, 0x5E, 0x86, 0xBA]),
        bytearray([0x83, 0x3D, 0xA7, 0x0C, 0xED, 0x6A, 0x20, 0x12, 0xD1, 0x96, 0xE6, 0xFE, 0x5C, 0x4D, 0x37, 0xC5]),
        bytearray([0xC7, 0x43, 0xD0, 0x67, 0x42, 0xEE, 0x90, 0xB8, 0xCA, 0x75, 0x50, 0x35, 0x20, 0xAD, 0xBC, 0xCE]),
        bytearray([0x8A, 0xE3, 0x66, 0x3F, 0x8D, 0x9E, 0x82, 0xA1, 0xED, 0xE6, 0x8C, 0x9C, 0xE8, 0x25, 0x6D, 0xAA]),
        bytearray([0x7F, 0xC9, 0x6F, 0x0B, 0xB1, 0x48, 0x5C, 0xA5, 0x5D, 0xD3, 0x64, 0xB7, 0x7A, 0xF5, 0xE4, 0xEA]),
        bytearray([0x91, 0xB7, 0x65, 0x78, 0x8B, 0xCB, 0x8B, 0xD4, 0x02, 0xED, 0x55, 0x3A, 0x66, 0x62, 0xD0, 0xAD]),
        bytearray([0x28, 0x24, 0xF9, 0x10, 0x1B, 0x8D, 0x0F, 0x7B, 0x6E, 0xB2, 0x63, 0xB5, 0xB5, 0x5B, 0x2E, 0xBB]),
        bytearray([0x30, 0xE2, 0x57, 0x5D, 0xE0, 0xA2, 0x49, 0xCE, 0xE8, 0xCF, 0x2B, 0x5E, 0x4D, 0x9F, 0x52, 0xC7]),
        bytearray([0x5E, 0xE5, 0x04, 0x39, 0x62, 0x32, 0x02, 0xFA, 0x85, 0x39, 0x3F, 0x72, 0xBB, 0x77, 0xFD, 0x1A]),
        bytearray([0xF8, 0x81, 0x74, 0xB1, 0xBD, 0xE9, 0xBF, 0xDD, 0x45, 0xE2, 0xF5, 0x55, 0x89, 0xCF, 0x46, 0xAB]),
        bytearray([0x7D, 0xF4, 0x92, 0x65, 0xE3, 0xFA, 0xD6, 0x78, 0xD6, 0xFE, 0x78, 0xAD, 0xBB, 0x3D, 0xFB, 0x63]),
        bytearray([0x74, 0x7F, 0xD6, 0x2D, 0xC7, 0xA1, 0xCA, 0x96, 0xE2, 0x7A, 0xCE, 0xFF, 0xAA, 0x72, 0x3F, 0xF7]),
        bytearray([0x1E, 0x58, 0xEB, 0xD0, 0x65, 0xBB, 0xF1, 0x68, 0xC5, 0xBD, 0xF7, 0x46, 0xBA, 0x7B, 0xE1, 0x00]),
        bytearray([0x24, 0x34, 0x7D, 0xAF, 0x5E, 0x4B, 0x35, 0x72, 0x7A, 0x52, 0x27, 0x6B, 0xA0, 0x54, 0x74, 0xDB]),
        bytearray([0x09, 0xB1, 0xC7, 0x05, 0xC3, 0x5F, 0x53, 0x66, 0x77, 0xC0, 0xEB, 0x36, 0x77, 0xDF, 0x83, 0x07]),
        bytearray([0xCC, 0xBE, 0x61, 0x5C, 0x05, 0xA2, 0x00, 0x33, 0x37, 0x8E, 0x59, 0x64, 0xA7, 0xDD, 0x70, 0x3D]),
        bytearray([0x0D, 0x47, 0x50, 0xBB, 0xFC, 0xB0, 0x02, 0x81, 0x30, 0xE1, 0x84, 0xDE, 0xA8, 0xD4, 0x84, 0x13]),
        bytearray([0x0C, 0xFD, 0x67, 0x9A, 0xF9, 0xB4, 0x72, 0x4F, 0xD7, 0x8D, 0xD6, 0xE9, 0x96, 0x42, 0x28, 0x8B]),
        bytearray([0x7A, 0xD3, 0x1A, 0x8B, 0x4B, 0xEF, 0xC2, 0xC2, 0xB3, 0x99, 0x01, 0xA9, 0xFE, 0x76, 0xB9, 0x87]),
        bytearray([0xBE, 0x78, 0x78, 0x17, 0xC7, 0xF1, 0x6F, 0x1A, 0xE0, 0xEF, 0x3B, 0xDE, 0x4C, 0xC2, 0xD7, 0x86]),
        bytearray([0x7C, 0xD8, 0xB8, 0x91, 0x91, 0x0A, 0x43, 0x14, 0xD0, 0x53, 0x3D, 0xD8, 0x4C, 0x45, 0xBE, 0x16]),
        bytearray([0x32, 0x72, 0x2C, 0x88, 0x07, 0xCF, 0x35, 0x7D, 0x4A, 0x2F, 0x51, 0x19, 0x44, 0xAE, 0x68, 0xDA]),
        bytearray([0x7E, 0x6B, 0xBF, 0xF6, 0xF6, 0x87, 0xB8, 0x98, 0xEE, 0xB5, 0x1B, 0x32, 0x16, 0xE4, 0x6E, 0x5D]),
        bytearray([0x08, 0xEA, 0x5A, 0x83, 0x49, 0xB5, 0x9D, 0xB5, 0x3E, 0x07, 0x79, 0xB1, 0x9A, 0x59, 0xA3, 0x54]),
        bytearray([0xF3, 0x12, 0x81, 0xBF, 0xE6, 0x9F, 0x51, 0xD1, 0x64, 0x08, 0x25, 0x21, 0xFF, 0xBB, 0x22, 0x61]),
        bytearray([0xAF, 0xFE, 0x8E, 0xB1, 0x3D, 0xD1, 0x7E, 0xD8, 0x0A, 0x61, 0x24, 0x1C, 0x95, 0x92, 0x56, 0xB6]),
        bytearray([0x92, 0xCD, 0xB4, 0xC2, 0x5B, 0xF2, 0x35, 0x5A, 0x23, 0x09, 0xE8, 0x19, 0xC9, 0x14, 0x42, 0x35]),
        bytearray([0xE1, 0xC6, 0x5B, 0x22, 0x6B, 0xE1, 0xDA, 0x02, 0xBA, 0x18, 0xFA, 0x21, 0x34, 0x9E, 0xF9, 0x6D]),
        bytearray([0x14, 0xEC, 0x76, 0xCE, 0x97, 0xF3, 0x8A, 0x0A, 0x34, 0x50, 0x6C, 0x53, 0x9A, 0x5C, 0x9A, 0xB4]),
        bytearray([0x1C, 0x9B, 0xC4, 0x90, 0xE3, 0x06, 0x64, 0x81, 0xFA, 0x59, 0xFD, 0xB6, 0x00, 0xBB, 0x28, 0x70]),
        bytearray([0x43, 0xA5, 0xCA, 0xCC, 0x0D, 0x6C, 0x2D, 0x3F, 0x2B, 0xD9, 0x89, 0x67, 0x6B, 0x3F, 0x7F, 0x57]),
        bytearray([0x00, 0xEF, 0xFD, 0x18, 0x08, 0xA4, 0x05, 0x89, 0x3C, 0x38, 0xFB, 0x25, 0x72, 0x70, 0x61, 0x06]),
        bytearray([0xEE, 0xAF, 0x49, 0xE0, 0x09, 0x87, 0x9B, 0xEF, 0xAA, 0xD6, 0x32, 0x6A, 0x32, 0x13, 0xC4, 0x29]),
        bytearray([0x8D, 0x26, 0xB9, 0x0F, 0x43, 0x1D, 0xBB, 0x08, 0xDB, 0x1D, 0xDA, 0xC5, 0xB5, 0x2C, 0x92, 0xED]),
        bytearray([0x57, 0x7C, 0x30, 0x60, 0xAE, 0x6E, 0xBE, 0xAE, 0x3A, 0xAB, 0x18, 0x19, 0xC5, 0x71, 0x68, 0x0B]),
        bytearray([0x11, 0x5A, 0x5D, 0x20, 0xD5, 0x3A, 0x8D, 0xD3, 0x9C, 0xC5, 0xAF, 0x41, 0x0F, 0x0F, 0x18, 0x6F]),
        bytearray([0x0D, 0x4D, 0x51, 0xAB, 0x23, 0x79, 0xBF, 0x80, 0x3A, 0xBF, 0xB9, 0x0E, 0x75, 0xFC, 0x14, 0xBF]),
        bytearray([0x99, 0x93, 0xDA, 0x3E, 0x7D, 0x2E, 0x5B, 0x15, 0xF2, 0x52, 0xA4, 0xE6, 0x6B, 0xB8, 0x5A, 0x98]),
        bytearray([0xF4, 0x28, 0x30, 0xA5, 0xFB, 0x0D, 0x8D, 0x76, 0x0E, 0xA6, 0x71, 0xC2, 0x2B, 0xDE, 0x66, 0x9D]),
        bytearray([0xFB, 0x5F, 0xEB, 0x7F, 0xC7, 0xDC, 0xDD, 0x69, 0x37, 0x01, 0x97, 0x9B, 0x29, 0x03, 0x5C, 0x47]),
        bytearray([0x02, 0x32, 0x6A, 0xE7, 0xD3, 0x96, 0xCE, 0x7F, 0x1C, 0x41, 0x9D, 0xD6, 0x52, 0x07, 0xED, 0x09]),
        bytearray([0x9C, 0x9B, 0x13, 0x72, 0xF8, 0xC6, 0x40, 0xCF, 0x1C, 0x62, 0xF5, 0xD5, 0x92, 0xDD, 0xB5, 0x82]),
        bytearray([0x03, 0xB3, 0x02, 0xE8, 0x5F, 0xF3, 0x81, 0xB1, 0x3B, 0x8D, 0xAA, 0x2A, 0x90, 0xFF, 0x5E, 0x61]),
        bytearray([0xBC, 0xD7, 0xF9, 0xD3, 0x2F, 0xAC, 0xF8, 0x47, 0xC0, 0xFB, 0x4D, 0x2F, 0x30, 0x9A, 0xBD, 0xA6]),
        bytearray([0xF5, 0x55, 0x96, 0xE9, 0x7F, 0xAF, 0x86, 0x7F, 0xAC, 0xB3, 0x3A, 0xE6, 0x9C, 0x8B, 0x6F, 0x93]),
        bytearray([0xEE, 0x29, 0x70, 0x93, 0xF9, 0x4E, 0x44, 0x59, 0x44, 0x17, 0x1F, 0x8E, 0x86, 0xE1, 0x70, 0xFC]),
        bytearray([0xE4, 0x34, 0x52, 0x0C, 0xF0, 0x88, 0xCF, 0xC8, 0xCD, 0x78, 0x1B, 0x6C, 0xCF, 0x8C, 0x48, 0xC4]),
        bytearray([0xC1, 0xBF, 0x66, 0x81, 0x8E, 0xF9, 0x53, 0xF2, 0xE1, 0x26, 0x6B, 0x6F, 0x55, 0x0C, 0xC9, 0xCD]),
        bytearray([0x56, 0x0F, 0xFF, 0x8F, 0x3C, 0x96, 0x49, 0x14, 0x45, 0x16, 0xF1, 0xBC, 0xBF, 0xCE, 0xA3, 0x0C]),
        bytearray([0x24, 0x08, 0xDC, 0x75, 0x37, 0x60, 0xA2, 0x9F, 0x05, 0x54, 0xB5, 0xF2, 0x43, 0x85, 0x73, 0x99]),
        bytearray([0xDD, 0xD5, 0xB5, 0x6A, 0x59, 0xC5, 0x5A, 0xE8, 0x3B, 0x96, 0x67, 0xC7, 0x5C, 0x2A, 0xE2, 0xDC]),
        bytearray([0xAA, 0x68, 0x67, 0x72, 0xE0, 0x2D, 0x44, 0xD5, 0xCD, 0xBB, 0x65, 0x04, 0xBC, 0xD5, 0xBF, 0x4E]),
        bytearray([0x1F, 0x17, 0xF0, 0x14, 0xE7, 0x77, 0xA2, 0xFE, 0x4B, 0x13, 0x6B, 0x56, 0xCD, 0x7E, 0xF7, 0xE9]),
        bytearray([0xC9, 0x35, 0x48, 0xCF, 0x55, 0x8D, 0x75, 0x03, 0x89, 0x6B, 0x2E, 0xEB, 0x61, 0x8C, 0xA9, 0x02]),
        bytearray([0xDE, 0x34, 0xC5, 0x41, 0xE7, 0xCA, 0x86, 0xE8, 0xBE, 0xA7, 0xC3, 0x1C, 0xEC, 0xE4, 0x36, 0x0F]),
        bytearray([0xDD, 0xE5, 0xFF, 0x55, 0x1B, 0x74, 0xF6, 0xF4, 0xE0, 0x16, 0xD7, 0xAB, 0x22, 0x31, 0x1B, 0x6A]),
        bytearray([0xB0, 0xE9, 0x35, 0x21, 0x33, 0x3F, 0xD7, 0xBA, 0xB4, 0x76, 0x2C, 0xCB, 0x4D, 0x80, 0x08, 0xD8]),
        bytearray([0x38, 0x14, 0x69, 0xC4, 0xC3, 0xF9, 0x1B, 0x96, 0x33, 0x63, 0x8E, 0x4D, 0x5F, 0x3D, 0xF0, 0x29]),
        bytearray([0xFA, 0x48, 0x6A, 0xD9, 0x8E, 0x67, 0x16, 0xEF, 0x6A, 0xB0, 0x87, 0xF5, 0x89, 0x45, 0x7F, 0x2A]),
        bytearray([0x32, 0x1A, 0x09, 0x12, 0x50, 0x14, 0x8A, 0x3E, 0x96, 0x3D, 0xEA, 0x02, 0x59, 0x32, 0xE1, 0x8F]),
        bytearray([0x4B, 0x00, 0xBE, 0x29, 0xBC, 0xB0, 0x28, 0x64, 0xCE, 0xFD, 0x43, 0xA9, 0x6F, 0xD9, 0x5C, 0xED]),
        bytearray([0x57, 0x7D, 0xC4, 0xFF, 0x02, 0x44, 0xE2, 0x80, 0x91, 0xF4, 0xCA, 0x0A, 0x75, 0x69, 0xFD, 0xA8]),
        bytearray([0x83, 0x53, 0x36, 0xC6, 0x18, 0x03, 0xE4, 0x3E, 0x4E, 0xB3, 0x0F, 0x6B, 0x6E, 0x79, 0x9B, 0x7A]),
        bytearray([0x5C, 0x92, 0x65, 0xFD, 0x7B, 0x59, 0x6A, 0xA3, 0x7A, 0x2F, 0x50, 0x9D, 0x85, 0xE9, 0x27, 0xF8]),
        bytearray([0x9A, 0x39, 0xFB, 0x89, 0xDF, 0x55, 0xB2, 0x60, 0x14, 0x24, 0xCE, 0xA6, 0xD9, 0x65, 0x0A, 0x9D]),
        bytearray([0x8B, 0x75, 0xBE, 0x91, 0xA8, 0xC7, 0x5A, 0xD2, 0xD7, 0xA5, 0x94, 0xA0, 0x1C, 0xBB, 0x95, 0x91]),
        bytearray([0x95, 0xC2, 0x1B, 0x8D, 0x05, 0xAC, 0xF5, 0xEC, 0x5A, 0xEE, 0x77, 0x81, 0x23, 0x95, 0xC4, 0xD7]),
        bytearray([0xB9, 0xA4, 0x61, 0x64, 0x36, 0x33, 0xFA, 0x5D, 0x94, 0x88, 0xE2, 0xD3, 0x28, 0x1E, 0x01, 0xA2]),
        bytearray([0xB8, 0xB0, 0x84, 0xFB, 0x9F, 0x4C, 0xFA, 0xF7, 0x30, 0xFE, 0x73, 0x25, 0xA2, 0xAB, 0x89, 0x7D]),
        bytearray([0x5F, 0x8C, 0x17, 0x9F, 0xC1, 0xB2, 0x1D, 0xF1, 0xF6, 0x36, 0x7A, 0x9C, 0xF7, 0xD3, 0xD4, 0x7C]),
    ]

    def __init__(self):
        self.is_kirk_initialized = False
        self.PRNG_DATA = bytearray(20)  # 0x14 bytes
        self.g_fuse90 = 0
        self.g_fuse94 = 0

        # Initialize with a dummy seed
        seed = b'KIRKENGINEINITIALIZATION'
        self.kirk_init(seed, len(seed))

    def kirk_init(self, seed: bytes, seed_length: int, fuse_id: int = 0) -> None:
        """Initialize the KIRK engine"""
        self.is_kirk_initialized = True

        # Initialize PRNG data
        if seed_length > 0:
            seed_buf = bytearray(seed_length + 4)
            struct.pack_into("<I", seed_buf, 0, seed_length)
            seed_buf[4:4 + seed_length] = seed
            self.PRNG_DATA = self.kirk_CMD11(seed_buf, seed_length + 4)

    def kirk_CMD4(self, inbuff: bytes, size: int = None) -> bytearray:
        """Encrypt with AESCBC128 using keys from table"""
        if not self.is_kirk_initialized:
            raise KirkNotInitializedError("KIRK not initialized")

        if size is None:
            size = len(inbuff)

        # Create a copy of input buffer for the output
        outbuff = bytearray(inbuff)

        # Read header
        mode = struct.unpack_from("<I", outbuff, 0)[0]
        unk_4 = struct.unpack_from("<I", outbuff, 4)[0]
        unk_8 = struct.unpack_from("<I", outbuff, 8)[0]
        keyseed = struct.unpack_from("<I", outbuff, 12)[0]
        data_size = struct.unpack_from("<I", outbuff, 16)[0]

        if mode != self.KIRK_MODE_ENCRYPT_CBC:
            raise KirkInvalidModeError("Invalid mode for KIRK_CMD_ENCRYPT")

        if data_size == 0:
            raise KirkDataSizeZeroError("Data size is zero")

        key = self.KEYVAULT[keyseed]
        if key is None:
            raise KirkInvalidSeedError(f"Invalid key seed: {keyseed}")

        # Set key and encrypt
        iv = bytes(16)  # All zeros IV
        cipher = AES.new(key, AES.MODE_CBC, iv)
        encrypted_data = cipher.encrypt(pad(outbuff[20:20 + data_size], AES.block_size))

        # Update the output buffer
        outbuff[20:20 + len(encrypted_data)] = encrypted_data

        # Update the header mode (from ENCRYPT_CBC to DECRYPT_CBC)
        struct.pack_into("<I", outbuff, 0, self.KIRK_MODE_DECRYPT_CBC)

        return outbuff

    def kirk_CMD5(self, inbuff: bytes, size: int = None) -> bytearray:
        """Encrypt with AESCBC128 using FUSE ID"""
        if not self.is_kirk_initialized:
            raise KirkNotInitializedError("KIRK not initialized")

        if size is None:
            size = len(inbuff)

        # Create a copy of input buffer for the output
        outbuff = bytearray(inbuff)

        # Read header
        mode = struct.unpack_from("<I", outbuff, 0)[0]
        unk_4 = struct.unpack_from("<I", outbuff, 4)[0]
        unk_8 = struct.unpack_from("<I", outbuff, 8)[0]
        keyseed = struct.unpack_from("<I", outbuff, 12)[0]
        data_size = struct.unpack_from("<I", outbuff, 16)[0]

        if mode != self.KIRK_MODE_ENCRYPT_CBC:
            raise KirkInvalidModeError("Invalid mode for KIRK_CMD_ENCRYPT_FUSE")

        if data_size == 0:
            raise KirkDataSizeZeroError("Data size is zero")

        key = None
        if keyseed == 0x100:
            # Use all-zeros key for FUSE
            key = bytes(16)
        else:
            raise KirkInvalidSeedError(f"Invalid key seed for KIRK_CMD_ENCRYPT_FUSE: {keyseed}")

        # Set key and encrypt
        iv = bytes(16)  # All zeros IV
        cipher = AES.new(key, AES.MODE_CBC, iv)
        encrypted_data = cipher.encrypt(pad(outbuff[20:20 + data_size], AES.block_size))

        # Update the output buffer
        outbuff[20:20 + len(encrypted_data)] = encrypted_data

        # Update the header mode (from ENCRYPT_CBC to DECRYPT_CBC)
        struct.pack_into("<I", outbuff, 0, self.KIRK_MODE_DECRYPT_CBC)

        return outbuff

    def kirk_CMD7(self, inbuff: bytes, size: int = None) -> bytearray:
        """Decrypt with AESCBC128 using keys from table"""
        if not self.is_kirk_initialized:
            raise KirkNotInitializedError("KIRK not initialized")

        if size is None:
            size = len(inbuff)

        # Read header
        mode = struct.unpack_from("<I", inbuff, 0)[0]
        keyseed = struct.unpack_from("<I", inbuff, 12)[0]
        data_size = struct.unpack_from("<I", inbuff, 16)[0]

        if mode != self.KIRK_MODE_DECRYPT_CBC:
            raise KirkInvalidModeError("Invalid mode for KIRK_CMD_DECRYPT")

        if data_size == 0:
            raise KirkDataSizeZeroError("Data size is zero")

        key = self.KEYVAULT[keyseed]
        if key is None:
            raise KirkInvalidSeedError(f"Invalid key seed: {keyseed}")

        # Set key and decrypt
        iv = bytes(16)  # All zeros IV
        cipher = AES.new(key, AES.MODE_CBC, iv)
        decrypted_data = cipher.decrypt(inbuff[20:20 + data_size])

        # Create output buffer with only the decrypted data (no header)
        inbuff[20:20 + len(decrypted_data)] = bytearray(decrypted_data)

        return bytearray(inbuff)

    def kirk_CMD8(self, inbuff: bytes, size: int = None) -> bytearray:
        """Decrypt with AESCBC128 using FUSE ID"""
        if not self.is_kirk_initialized:
            raise KirkNotInitializedError("KIRK not initialized")

        if size is None:
            size = len(inbuff)

        # Read header
        mode = struct.unpack_from("<I", inbuff, 0)[0]
        keyseed = struct.unpack_from("<I", inbuff, 12)[0]
        data_size = struct.unpack_from("<I", inbuff, 16)[0]

        if mode != self.KIRK_MODE_DECRYPT_CBC:
            raise KirkInvalidModeError("Invalid mode for KIRK_CMD_DECRYPT_FUSE")

        if data_size == 0:
            raise KirkDataSizeZeroError("Data size is zero")

        if keyseed == 0x100:
            # Use all-zeros key for FUSE
            key = bytes(16)
        else:
            raise KirkInvalidSeedError(f"Invalid key seed for KIRK_CMD_DECRYPT_FUSE: {keyseed}")

        # Set key and decrypt
        cipher = AES.new(key, AES.MODE_CBC, bytes(16))
        decrypted_data = cipher.decrypt(inbuff[20:20 + data_size])

        # Create output buffer with only the decrypted data (no header)
        inbuff[20:20 + len(decrypted_data)] = bytearray(decrypted_data)

        return bytearray(inbuff)

    def kirk_CMD11(self, inbuff: bytes, size: int = None) -> bytearray:
        """Generate SHA1 hash"""
        if not self.is_kirk_initialized:
            raise KirkNotInitializedError("KIRK not initialized")

        if size is None:
            size = len(inbuff)

        if size == 0:
            raise KirkDataSizeZeroError("Data size is zero")

        # Read data size from header
        data_size = struct.unpack_from("<I", inbuff, 0)[0]

        # Get the actual data to hash (skip the 4-byte header)
        data = inbuff[4:4 + data_size]

        # Calculate SHA1 hash
        sha1_hash = SHA1.new(data).digest()

        return bytearray(sha1_hash)

    def kirk_CMD14(self, size: int) -> bytearray:
        """Generate pseudo random number"""
        if not self.is_kirk_initialized:
            raise KirkNotInitializedError("KIRK not initialized")

        if size <= 0:
            return bytearray()

        # Create temporary buffer
        temp = bytearray(0x104)
        temp[0] = 0
        temp[1] = 0
        temp[2] = 1
        temp[3] = 0

        # Random key data
        key = bytes([
            0xA7, 0x2E, 0x4C, 0xB6, 0xC3, 0x34, 0xDF, 0x85,
            0x70, 0x01, 0x49, 0xFC, 0xC0, 0x87, 0xC4, 0x77
        ])

        # Get current time for randomness
        import time
        systime = int(time.time())

        # Prepare buffer for hashing
        temp[4:4 + 20] = self.PRNG_DATA
        temp[0x18] = systime & 0xFF
        temp[0x19] = (systime >> 8) & 0xFF
        temp[0x1A] = (systime >> 16) & 0xFF
        temp[0x1B] = (systime >> 24) & 0xFF
        temp[0x1C:0x1C + 16] = key

        # Create SHA1 header
        struct.pack_into("<I", temp, 0, 0x100)

        # Generate a new PRNG_DATA
        self.PRNG_DATA = self.kirk_CMD11(temp, 0x104)

        # Fill the output buffer with random data
        outbuff = bytearray(size)
        remaining = size

        while remaining > 0:
            if remaining >= 20:
                # Copy full PRNG_DATA block
                outbuff[size - remaining:size - remaining + 20] = self.PRNG_DATA
                remaining -= 20
                # Update PRNG_DATA for next block if needed
                if remaining > 0:
                    self.PRNG_DATA = self.kirk_CMD11(temp, 0x104)
            else:
                # Copy partial block
                outbuff[size - remaining:] = self.PRNG_DATA[:remaining]
                remaining = 0

        return outbuff

    def sceUtilsBufferCopyWithRange(self, outsize: int, inbuff: bytes, insize: int, cmd: int) -> bytearray:
        """Execute a KIRK command"""
        if cmd == self.PSP_KIRK_CMD_ENCRYPT:
            result = self.kirk_CMD4(inbuff, insize)
        elif cmd == self.PSP_KIRK_CMD_ENCRYPT_FUSE:
            result = self.kirk_CMD5(inbuff, insize)
        elif cmd == self.PSP_KIRK_CMD_DECRYPT:
            result = self.kirk_CMD7(inbuff, insize)
        elif cmd == self.PSP_KIRK_CMD_DECRYPT_FUSE:
            result = self.kirk_CMD8(inbuff, insize)
        elif cmd == self.PSP_KIRK_CMD_SHA1_HASH:
            result = self.kirk_CMD11(inbuff, insize)
        elif cmd == self.PSP_KIRK_CMD_PRNG:
            result = self.kirk_CMD14(outsize)
        else:
            raise KirkError(f"Unimplemented KIRK command: {cmd}")

        # Copy result to output buffer if provided and ensure it doesn't exceed outsize
        if result is not None:
            length = min(len(result), outsize)
            return result[:0x14 + length]

        return result
